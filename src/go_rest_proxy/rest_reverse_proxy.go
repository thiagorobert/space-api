package main

import (
	"context"
	"flag"
	"net/http"

	"github.com/golang/glog"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	gw "github.com/thiagorobert/space-api/autogenerated_proto"
)

var (
	port = flag.String(
		"port",  ":8081", "REST proxy port")
	grpcServerEndpoint = flag.String(
		"grpc_endpoint",  "localhost:9090", "gRPC server endpoint")
)

func run() error {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	mux := runtime.NewServeMux()
	cred := insecure.NewCredentials()
	opts := []grpc.DialOption{grpc.WithTransportCredentials(cred)}
	err := gw.RegisterUnaryHandlerFromEndpoint(
		ctx, mux,  *grpcServerEndpoint, opts)
	if err != nil {
		return err
	}

	// Start HTTP server that proxies calls to gRPC server.
	return http.ListenAndServe(*port, mux)
}

func main() {
	flag.Parse()
	defer glog.Flush()

	if err := run(); err != nil {
		glog.Fatal(err)
	}
}
